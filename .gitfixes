.gitignore:1:+madgwick/
graph.py:1:+#!/usr/bin/python3
graph.py:2:+import socket
graph.py:3:+from stream import sio
graph.py:4:+
graph.py:5:+with sio("server") as server:
graph.py:6:+    print(server.input())
graph.py:7:+
read.py:1:+#!/usr/bin/python3
read.py:2:+import time
read.py:3:+from icm20948 import ICM20948
read.py:4:+
read.py:5:+s = ICM20948()
read.py:6:+
read.py:7:+print("ax,ay,az,gx,gy,gz,mx,my,mz")
read.py:8:+
read.py:9:+while True:
read.py:10:+    x, y, z = s.read_magnetometer_data()
read.py:11:+    ax, ay, az, gx, gy, gz = s.read_accelerometer_gyro_data()
read.py:12:+
read.py:13:+#    print("""
read.py:14:+#Accel: {:05.2f} {:05.2f} {:05.2f}
read.py:15:+#Gyro:  {:05.2f} {:05.2f} {:05.2f}
read.py:16:+#Mag:   {:05.2f} {:05.2f} {:05.2f}""".format(
read.py:17:+#        ax, ay, az, gx, gy, gz, x, y, z
read.py:18:+#    ))
read.py:19:+
read.py:20:+    data = [ax,ay,az,gx,gy,gz,x,y,z]
read.py:21:+
read.py:22:+    line = ""
read.py:23:+    for i,x in enumerate(data[:-1]):
read.py:24:+        line+=f"{x:05.2f}"+"," 
read.py:25:+    line+=f"{data[-1]:05.2f}"
read.py:26:+    print(line)
read.py:27:+
read.py:28:+    time.sleep(0.25)
stream.py:1:+#!/usr/bin/python3
stream.py:2:+from socket import *
stream.py:3:+
stream.py:4:+class sio:
stream.py:5:+    def __init__(self, type="server", buf=1024):
stream.py:6:+        self.IP = gethostname()
stream.py:7:+        self.PORT = 5005
stream.py:8:+        self.BUF = buf
stream.py:9:+        self.s = socket(AF_INET, SOCK_STREAM)
stream.py:10:+        self.type = type
stream.py:11:+        if type == "server":
stream.py:12:+            try:
stream.py:13:+                self.s.bind((self.IP, self.PORT))
stream.py:14:+            except:
stream.py:15:+                print("address in use")
stream.py:16:+            self.s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
stream.py:17:+            self.s.listen(1)
stream.py:18:+            self.conn, self.addr = self.s.accept()
stream.py:19:+        elif type == "client":
stream.py:20:+            self.s.connect((self.IP, self.PORT))
stream.py:21:+
stream.py:22:+    def output(self,msg):
stream.py:23:+        if self.type == "client":
stream.py:24:+            self.s.send(bytes(msg,"utf-8"))
stream.py:25:+            data = self.s.recv(self.BUF)
stream.py:26:+            return data.decode("utf-8")
stream.py:27:+
stream.py:28:+    def input(self):
stream.py:29:+        if self.type == "server":
stream.py:30:+            data = self.conn.recv(self.BUF)
stream.py:31:+            self.conn.send(bytes("OK","utf-8"))
stream.py:32:+            return data.decode("utf-8")
stream.py:33:+
stream.py:34:+    def __enter__(self):
stream.py:35:+        self._close()
stream.py:36:+        return self
stream.py:37:+
stream.py:38:+    def __exit__(self, exc_type, exc_value, traceback):
stream.py:39:+        self._close()
stream.py:40:+        return self
stream.py:41:+
stream.py:42:+    def _close(self):
stream.py:43:+        if self.type == "server":
stream.py:44:+            self.conn.close()
stream.py:45:+        else:
stream.py:46:+            self.s.close()
stream.py:47:+
stream.py:48:+if __name__ == "__main__":
stream.py:49:+    client = sio("client")
stream.py:50:+    msg = "Hello"
stream.py:51:+    print(client.output(msg))
stream.py:52:+
stream.py:53:+
stream.py:54:+    
stream.py:55:+
